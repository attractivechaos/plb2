#!/usr/bin/env perl

use strict;
use warnings;

my @hard20 = (
	'..............3.85..1.2.......5.7.....4...1...9.......5......73..2.1........4...9',
	'.......12........3..23..4....18....5.6..7.8.......9.....85.....9...4.5..47...6...',
	'.2..5.7..4..1....68....3...2....8..3.4..2.5.....6...1...2.9.....9......57.4...9..',
	'........3..1..56...9..4..7......9.5.7.......8.5.4.2....8..2..9...35..1..6........',
	'12.3....435....1....4........54..2..6...7.........8.9...31..5.......9.7.....6...8',
	'1.......2.9.4...5...6...7...5.9.3.......7.......85..4.7.....6...3...9.8...2.....1',
	'.......39.....1..5..3.5.8....8.9...6.7...2...1..4.......9.8..5..2....6..4..7.....',
	'12.3.....4.....3....3.5......42..5......8...9.6...5.7...15..2......9..6......7..8',
	'..3..6.8....1..2......7...4..9..8.6..3..4...1.7.2.....3....5.....5...6..98.....5.',
	'1.......9..67...2..8....4......75.3...5..2....6.3......9....8..6...4...1..25...6.',
	'..9...4...7.3...2.8...6...71..8....6....1..7.....56...3....5..1.4.....9...2...7..',
	'....9..5..1.....3...23..7....45...7.8.....2.......64...9..1.....8..6......54....7',
	'4...3.......6..8..........1....5..9..8....6...7.2........1.27..5.3....4.9........',
	'7.8...3.....2.1...5.........4.....263...8.......1...9..9.6....4....7.5...........',
	'3.7.4...........918........4.....7.....16.......25..........38..9....5...2.6.....',
	'........8..3...4...9..2..6.....79.......612...6.5.2.7...8...5...1.....2.4.5.....3',
	'.......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...',
	'.......12....35......6...7.7.....3.....4..8..1...........12.....8.....4..5....6..',
	'1.......2.9.4...5...6...7...5.3.4.......6........58.4...2...6...3...9.8.7.......1',
	'.....1.2.3...4.5.....6....7..2.....1.8..9..3.4.....8..5....2....9..3.4....67.....'
);

my $n = 200;
my @aux = &sd_genmat();
for my $i (1 .. $n) {
	for (@hard20) {
		my $ret = &sd_solve($aux[0], $aux[1], $_);
		print join "\n", @$ret, '';
	}
}

sub sd_genmat {
	my (@C, @R);
	for my $i (0..8) {
		for my $j (0..8) {
			for my $k (0..8) {
				push(@C, [9*$i+$j, int($i/3)*27+int($j/3)*9+$k+81, 9*$i+$k+162, 9*$j+$k+243])
			}
		}
	}
	for my $r (0..728) {
		for my $k (@{$C[$r]}) {
			push(@{$R[$k]}, $r);
		}
	}
	return (\@R, \@C);
}

sub sd_update {
	my ($R, $C, $sr, $sc, $r, $v) = @_;
	my ($min, $min_c) = (10, 0);
	for my $c (@{$C->[$r]})  {
		$sc->[$c] += $v > 0 ? 128 : -128; # trinary slightly faster than if-else
	}
	for my $c (@{$C->[$r]}) {
		if ($v > 0) {
			for my $rr (@{$R->[$c]}) {
				$sr->[$rr]++;
				next if ($sr->[$rr] != 1);
				for my $cc (@{$C->[$rr]}) {
					if (--$sc->[$cc] < $min) {
						$min = $sc->[$cc];
						$min_c = $cc;
					}
				}
			}
		} else {
			for my $rr (@{$R->[$c]}) {
				$sr->[$rr]--;
				next if ($sr->[$rr] != 0);
				my $p = $C->[$rr];
				$sc->[$p->[0]]++;
				$sc->[$p->[1]]++;
				$sc->[$p->[2]]++;
				$sc->[$p->[3]]++;
			}
		}
	}
	return $min<<16 | $min_c;
}

sub sd_solve {
	my ($R, $C, $s) = @_;
	my (@sr, @sc, @cr, @cc, @ret);
	my $hints = 0;
	@sr = (0) x 729;
	@sc = (9) x 324;
	my @chars = unpack "C*", $s; # faster than split //, $s
	for my $i (0..80) {
		my $a = $chars[$i] > 48 ? $chars[$i] - 49 : -1;

		if ($a >= 0) {
			&sd_update($R, $C, \@sr, \@sc, $i*9+$a, 1);
			$hints++;
		}
		$cr[$i] = $cc[$i] = -1;
	}
	#for my $i (0..323) {print("$i\t$sc[$i]\n")}
	my ($i, $dir, $cand) = (0, 1, 10<<16);
	for (;;) {
		while ($i >= 0 && $i < 81 - $hints) {
			if ($dir == 1) {
				my $min = $cand>>16;
				$cc[$i] = $cand & 0xffff;
				if ($min > 1) {
					for my $c (0..323) {
						if ($sc[$c] < $min) {
							$min = $sc[$c];
							$cc[$i] = $c;
							last if ($min <= 1);
						}
					}
				}
				if ($min == 0 || $min == 10) {
					$cr[$i--] = $dir = -1;
				}
			}
			my $c = $cc[$i];
			&sd_update($R, $C, \@sr, \@sc, $R->[$c][$cr[$i]], -1) if ($dir == -1 && $cr[$i] >= 0);
			my $r2;
			for ($r2 = $cr[$i] + 1; $r2 < 9; $r2++) {
				last if ($sr[$R->[$c][$r2]] == 0);
			}
			if ($r2 < 9) {
				$cand = &sd_update($R, $C, \@sr, \@sc, $R->[$c][$r2], 1);
				$cr[$i++] = $r2; $dir = 1;
			} else {
				$cr[$i--] = $dir = -1;
			}
		}
		last if ($i < 0);
		for my $j (0..$i-1) {
			my $r = $R->[$cc[$j]][$cr[$j]];
			substr($s, int($r/9), 1) = $r%9 + 1;
		}
		push(@ret, $s);
		$i--; $dir = -1;
	}
	return \@ret;
}
